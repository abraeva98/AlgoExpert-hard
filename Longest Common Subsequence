// O(NM) - time, space

function longestCommonSubsequence(str1, str2) {
	/*
		two dimensional dp with str1 and str2, initialize
		the first row and the first column as empty string,
		on each iteration if the letters are equal pick the diagonal and
		add current, if they are not pick the left of up,
		return the last
	*/
	let dp = new Array(str1.length + 1).fill('').map(() => new Array(str2.length + 1).fill(''));
	for (let i = 1; i <= str1.length; i ++) {
		for (let j = 1; j <= str2.length; j ++) {
			if (str1[i - 1] === str2[j - 1]) {
				dp[i][j] = dp[i - 1][j - 1] + str1[i - 1];
			} else {
				if (dp[i - 1][j].length > dp[i][j - 1].length) {
					dp[i][j] = dp[i - 1][j];
				} else {
					dp[i][j] = dp[i][j - 1];
				}
			}
		}
	}
	return dp[str1.length][str2.length].split('');
}
