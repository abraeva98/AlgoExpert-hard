// O(N) - time, O(1) - soace

function minNumberOfJumps(array) {
	if (array.length === 1) return 0;
	let jumps = 1;
	let maxReach = array[0];
	let steps = array[0];
	for (let i = 1; i < array.length - 1; i ++) {
		maxReach = Math.max(maxReach, array[i] + i);
		steps --;
		if (steps === 0) {
			jumps ++;
			steps = maxReach - i;
		}
	}
	return jumps;
}

// O(N^2) - time, O(N) - space

function minNumberOfJumps(array) {
	let n = array.length;
	let dp = new Array(n).fill(Infinity);
	dp[0] = 0;
	for (let i = 0; i < array.length; i ++) {
		for (let j = 0; j < i; j ++) {
			if (array[j] + j >= i) {
				dp[i] = Math.min(dp[i], dp[j] + 1);
			}
		}
	}
	return dp[n - 1];
}
