// O(logN) - time, O(1) - space

function shiftedBinarySearch(array, target) {
  /*
		find the middle of the array, check if the
		left side is sorted, check if target is whithin 
		the borders, change left or right pointer,
		if target is equal to middle number - return
	*/
	let left = 0;
	let right = array.length - 1;
	while (left <= right) {
		let middle = Math.floor((left + right) / 2);
		if (array[middle] === target) return middle;
		if (array[left] <= array[middle]) {
			if (target >= array[left] && target < array[middle]) {
				right = middle - 1;
			} else {
				left = middle + 1;
			}
		} else {
			if (target <= array[right] && target > array[middle]) {
				left = middle +1;
			} else {
				right = middle - 1;
			}
		}
	}
	return -1;
}
